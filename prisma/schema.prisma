generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model attendance {
  id              Int               @id @default(autoincrement())
  courseCode      String            @db.VarChar(4)
  description     String            @db.VarChar(50)
  date            DateTime          @db.Date
  createdAt       DateTime?         @default(now()) @db.DateTime(0)
  createdBy       String?           @db.VarChar(100)
  updatedAt       DateTime?         @db.DateTime(0)
  updatedBy       String?           @db.VarChar(100)
  courses         courses           @relation(fields: [courseCode], references: [code], onDelete: Cascade, onUpdate: NoAction, map: "fk_courseId_attendance")
  attendancelines attendancelines[]

  @@index([courseCode], map: "fk_courseId_attendance_idx")
}

model attendancelines {
  id           Int        @id @default(autoincrement())
  attendaceId  Int
  studentId    Int
  state        String     @db.VarChar(50)
  observations String     @db.VarChar(500)
  createdAt    DateTime?  @default(now()) @db.DateTime(0)
  createdBy    String?    @db.VarChar(100)
  updatedAt    DateTime?  @db.DateTime(0)
  updatedBy    String?    @db.VarChar(100)
  students     students   @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "dk_studentId_attendanceLiness")
  attendance   attendance @relation(fields: [attendaceId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_attendaceId_attendandeLines")

  @@index([studentId], map: "dk_studentCedula_attendanceLiness_idx")
  @@index([attendaceId], map: "fk_attendaceHeaderId_attendandeLines_idx")
}

model comments {
  id          Int       @id @default(autoincrement())
  description String    @db.VarChar(1000)
  createdAt   DateTime? @default(now()) @db.DateTime(0)
}

model courses {
  code                   String        @id @unique(map: "code_UNIQUE") @db.VarChar(4)
  name                   String        @db.VarChar(100)
  durationHours          Int
  numberStudentsEnrolled Int
  schedule               String?       @db.VarChar(500)
  startDate              DateTime?     @db.Date
  endDate                DateTime?     @db.Date
  quota                  Int
  isFinished             Boolean
  attendacePercentaje    Decimal?      @db.Decimal(5, 2)
  createdAt              DateTime?     @default(now()) @db.DateTime(0)
  createdBy              String?       @db.VarChar(100)
  updatedAt              DateTime?     @db.DateTime(0)
  updatedBy              String?       @db.VarChar(100)
  openEnrollment         Boolean?      @default(false)
  attendance             attendance[]
  enrollment             enrollment[]
  evaluations            evaluations[]
  invitations            invitations[]
  usercourses            usercourses[]
}

model enrollment {
  id            Int       @id @default(autoincrement())
  courseCode    String    @db.VarChar(4)
  studentId     Int
  studentCedula Int
  createdAt     DateTime? @default(now()) @db.DateTime(0)
  createdBy     String?   @db.VarChar(100)
  courses       courses   @relation(fields: [courseCode], references: [code], onDelete: Cascade, onUpdate: NoAction, map: "fk_courseCode_enrollment")
  students      students  @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_studenId_enrollment")

  @@index([courseCode], map: "fk_courseCode_enrollment_idx")
  @@index([studentId], map: "fk_studentCedula_enrollment_idx")
}

model evaluations {
  id               Int             @id @default(autoincrement())
  courseCode       String          @db.VarChar(4)
  name             String          @db.VarChar(100)
  percentaje       Decimal         @db.Decimal(5, 2)
  points           Int
  isAutoCalculated Boolean
  createdAt        DateTime?       @default(now()) @db.DateTime(0)
  createdBy        String?         @db.VarChar(100)
  updatedAt        DateTime?       @db.DateTime(0)
  updatedBy        String?         @db.VarChar(100)
  courses          courses         @relation(fields: [courseCode], references: [code], onDelete: Cascade, onUpdate: NoAction, map: "fk_courseCode_evaluations")
  grades           grades[]
  gradesheaders    gradesheaders[]

  @@index([courseCode], map: "fk_courseCode_evaluations_idx")
}

model grades {
  id           Int         @id @default(autoincrement())
  studentId    Int
  evaluationId Int
  points       Int
  feedback     String?     @db.VarChar(500)
  createdAt    DateTime?   @default(now()) @db.DateTime(0)
  createdBy    String?     @db.VarChar(100)
  updatedAt    DateTime?   @db.DateTime(0)
  updatedBy    String?     @db.VarChar(100)
  evaluations  evaluations @relation(fields: [evaluationId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_evaluationId_grades")
  students     students    @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_studentId_grades")

  @@index([evaluationId], map: "fk_evaluationId_grades_idx")
  @@index([studentId], map: "fk_studentCedula_grades_idx")
}

model gradesheaders {
  id           Int           @id @default(autoincrement())
  evaluationId Int
  name         String        @db.VarChar(100)
  points       Int
  createdAt    DateTime?     @default(now()) @db.DateTime(0)
  createdBy    String?       @db.VarChar(100)
  updatedAt    DateTime?     @db.DateTime(0)
  updatedBy    String?       @db.VarChar(100)
  evaluations  evaluations   @relation(fields: [evaluationId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_evaluationId_gradesheaders")
  gradeslines  gradeslines[]

  @@index([evaluationId], map: "fk_evaluationId_gradesheaders_idx")
}

model gradeslines {
  id            Int           @id @default(autoincrement())
  gradeHeaderId Int
  studentId     Int
  points        Int
  feedback      String?       @db.VarChar(500)
  createdAt     DateTime?     @default(now()) @db.DateTime(0)
  createdBy     String?       @db.VarChar(100)
  updatedAt     DateTime?     @db.DateTime(0)
  updatedBy     String?       @db.VarChar(100)
  gradesheaders gradesheaders @relation(fields: [gradeHeaderId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_gradeHeaderId_gradeslines")
  students      students      @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_studentId_gradeslines")

  @@index([gradeHeaderId], map: "fk_gradeHeaderId_gradeslines_idx")
  @@index([studentId], map: "fk_studentCedula_gradeslines_idx")
}

model invitations {
  id                                  Int       @id @default(autoincrement())
  senderId                            Int
  receptorId                          Int
  courseCode                          String    @db.VarChar(4)
  state                               String    @db.VarChar(50)
  senderName                          String    @db.VarChar(100)
  courseName                          String    @db.VarChar(100)
  createAt                            DateTime? @default(now()) @db.DateTime(0)
  courses                             courses   @relation(fields: [courseCode], references: [code], onDelete: NoAction, onUpdate: NoAction, map: "fk_courseCode_invitations")
  users_invitations_receptorIdTousers users     @relation("invitations_receptorIdTousers", fields: [receptorId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_receptorId_invitations")
  users_invitations_senderIdTousers   users     @relation("invitations_senderIdTousers", fields: [senderId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_senderId_invitations")

  @@index([courseCode], map: "fk_courseCode_invitations_idx")
  @@index([receptorId], map: "fk_receptorId_invitations_idx")
  @@index([senderId], map: "fk_senderId_invitations_idx")
}

model students {
  id                    Int               @id @default(autoincrement())
  cedula                Int
  name                  String            @db.VarChar(50)
  lastname              String            @db.VarChar(50)
  bornDate              DateTime          @db.Date
  gender                String            @db.VarChar(25)
  phone                 String            @db.VarChar(20)
  email                 String            @db.VarChar(75)
  disability            String            @db.VarChar(15)
  disabilityDescription String?           @db.VarChar(100)
  provincia             String?           @db.VarChar(80)
  canton                String?           @db.VarChar(80)
  distrito              String?           @db.VarChar(80)
  comunidad             String?           @db.VarChar(80)
  observations          String?           @db.VarChar(500)
  createdAt             DateTime?         @default(now()) @db.DateTime(0)
  createdBy             String?           @db.VarChar(100)
  updatedAt             DateTime?         @db.DateTime(0)
  updatedBy             String?           @db.VarChar(100)
  attendancelines       attendancelines[]
  enrollment            enrollment[]
  grades                grades[]
  gradeslines           gradeslines[]
}

model usercourses {
  id         Int     @id @default(autoincrement())
  userId     Int
  courseCode String  @db.VarChar(4)
  isCreator  Boolean
  courses    courses @relation(fields: [courseCode], references: [code], onUpdate: NoAction, map: "fk_courseCode_usercourses")
  users      users   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_userId_usercourses")

  @@index([courseCode], map: "fk_courseCode_usercourses_idx")
  @@index([userId], map: "fk_userId_usercourses_idx")
}

model users {
  id                                        Int           @id @default(autoincrement())
  name                                      String        @db.VarChar(50)
  lastname                                  String        @db.VarChar(50)
  email                                     String        @db.VarChar(75)
  password                                  String        @db.VarChar(60)
  createdAt                                 DateTime?     @default(now()) @db.DateTime(0)
  updatedAt                                 DateTime?     @db.DateTime(0)
  invitations_invitations_receptorIdTousers invitations[] @relation("invitations_receptorIdTousers")
  invitations_invitations_senderIdTousers   invitations[] @relation("invitations_senderIdTousers")
  usercourses                               usercourses[]
}
